// Code generated by mockery v2.46.2. DO NOT EDIT.

package servicemocks

import (
	service "github.com/fhnw-imvs/fhnw-cisin/internal/service"
	mock "github.com/stretchr/testify/mock"
)

// MockTraceService is an autogenerated mock type for the TraceService type
type MockTraceService struct {
	mock.Mock
}

type MockTraceService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTraceService) EXPECT() *MockTraceService_Expecter {
	return &MockTraceService_Expecter{mock: &_m.Mock}
}

// List provides a mock function with given fields:
func (_m *MockTraceService) List() (*service.Trace, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *service.Trace
	var r1 error
	if rf, ok := ret.Get(0).(func() (*service.Trace, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *service.Trace); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.Trace)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTraceService_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockTraceService_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
func (_e *MockTraceService_Expecter) List() *MockTraceService_List_Call {
	return &MockTraceService_List_Call{Call: _e.mock.On("List")}
}

func (_c *MockTraceService_List_Call) Run(run func()) *MockTraceService_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTraceService_List_Call) Return(_a0 *service.Trace, _a1 error) *MockTraceService_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTraceService_List_Call) RunAndReturn(run func() (*service.Trace, error)) *MockTraceService_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListIDs provides a mock function with given fields:
func (_m *MockTraceService) ListIDs() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListIDs")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTraceService_ListIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIDs'
type MockTraceService_ListIDs_Call struct {
	*mock.Call
}

// ListIDs is a helper method to define mock.On call
func (_e *MockTraceService_Expecter) ListIDs() *MockTraceService_ListIDs_Call {
	return &MockTraceService_ListIDs_Call{Call: _e.mock.On("ListIDs")}
}

func (_c *MockTraceService_ListIDs_Call) Run(run func()) *MockTraceService_ListIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTraceService_ListIDs_Call) Return(_a0 []string, _a1 error) *MockTraceService_ListIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTraceService_ListIDs_Call) RunAndReturn(run func() ([]string, error)) *MockTraceService_ListIDs_Call {
	_c.Call.Return(run)
	return _c
}

// ListSBOMs provides a mock function with given fields: traceID
func (_m *MockTraceService) ListSBOMs(traceID string) ([]string, error) {
	ret := _m.Called(traceID)

	if len(ret) == 0 {
		panic("no return value specified for ListSBOMs")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(traceID)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(traceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(traceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTraceService_ListSBOMs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSBOMs'
type MockTraceService_ListSBOMs_Call struct {
	*mock.Call
}

// ListSBOMs is a helper method to define mock.On call
//   - traceID string
func (_e *MockTraceService_Expecter) ListSBOMs(traceID interface{}) *MockTraceService_ListSBOMs_Call {
	return &MockTraceService_ListSBOMs_Call{Call: _e.mock.On("ListSBOMs", traceID)}
}

func (_c *MockTraceService_ListSBOMs_Call) Run(run func(traceID string)) *MockTraceService_ListSBOMs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTraceService_ListSBOMs_Call) Return(_a0 []string, _a1 error) *MockTraceService_ListSBOMs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTraceService_ListSBOMs_Call) RunAndReturn(run func(string) ([]string, error)) *MockTraceService_ListSBOMs_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTraceService creates a new instance of MockTraceService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTraceService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTraceService {
	mock := &MockTraceService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
