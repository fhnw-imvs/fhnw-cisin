// Code generated by mockery v2.46.2. DO NOT EDIT.

package servicemocks

import (
	service "github.com/fhnw-imvs/fhnw-cisin/internal/service"
	mock "github.com/stretchr/testify/mock"
)

// MockSecScanService is an autogenerated mock type for the SecScanService type
type MockSecScanService struct {
	mock.Mock
}

type MockSecScanService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSecScanService) EXPECT() *MockSecScanService_Expecter {
	return &MockSecScanService_Expecter{mock: &_m.Mock}
}

// Scan provides a mock function with given fields: sbomPath
func (_m *MockSecScanService) Scan(sbomPath string) (*service.SecScanResult, error) {
	ret := _m.Called(sbomPath)

	if len(ret) == 0 {
		panic("no return value specified for Scan")
	}

	var r0 *service.SecScanResult
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*service.SecScanResult, error)); ok {
		return rf(sbomPath)
	}
	if rf, ok := ret.Get(0).(func(string) *service.SecScanResult); ok {
		r0 = rf(sbomPath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.SecScanResult)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(sbomPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSecScanService_Scan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scan'
type MockSecScanService_Scan_Call struct {
	*mock.Call
}

// Scan is a helper method to define mock.On call
//   - sbomPath string
func (_e *MockSecScanService_Expecter) Scan(sbomPath interface{}) *MockSecScanService_Scan_Call {
	return &MockSecScanService_Scan_Call{Call: _e.mock.On("Scan", sbomPath)}
}

func (_c *MockSecScanService_Scan_Call) Run(run func(sbomPath string)) *MockSecScanService_Scan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSecScanService_Scan_Call) Return(_a0 *service.SecScanResult, _a1 error) *MockSecScanService_Scan_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSecScanService_Scan_Call) RunAndReturn(run func(string) (*service.SecScanResult, error)) *MockSecScanService_Scan_Call {
	_c.Call.Return(run)
	return _c
}

// ScanStdout provides a mock function with given fields: sbomURLs
func (_m *MockSecScanService) ScanStdout(sbomURLs []string) error {
	ret := _m.Called(sbomURLs)

	if len(ret) == 0 {
		panic("no return value specified for ScanStdout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(sbomURLs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSecScanService_ScanStdout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScanStdout'
type MockSecScanService_ScanStdout_Call struct {
	*mock.Call
}

// ScanStdout is a helper method to define mock.On call
//   - sbomURLs []string
func (_e *MockSecScanService_Expecter) ScanStdout(sbomURLs interface{}) *MockSecScanService_ScanStdout_Call {
	return &MockSecScanService_ScanStdout_Call{Call: _e.mock.On("ScanStdout", sbomURLs)}
}

func (_c *MockSecScanService_ScanStdout_Call) Run(run func(sbomURLs []string)) *MockSecScanService_ScanStdout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *MockSecScanService_ScanStdout_Call) Return(_a0 error) *MockSecScanService_ScanStdout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSecScanService_ScanStdout_Call) RunAndReturn(run func([]string) error) *MockSecScanService_ScanStdout_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSecScanService creates a new instance of MockSecScanService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSecScanService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSecScanService {
	mock := &MockSecScanService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
