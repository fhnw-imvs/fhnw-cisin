// Code generated by mockery v2.46.2. DO NOT EDIT.

package repomocks

import (
	mock "github.com/stretchr/testify/mock"

	v1 "github.com/google/go-containerregistry/pkg/v1"
)

// MockRegistry is an autogenerated mock type for the Registry type
type MockRegistry struct {
	mock.Mock
}

type MockRegistry_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRegistry) EXPECT() *MockRegistry_Expecter {
	return &MockRegistry_Expecter{mock: &_m.Mock}
}

// GetURL provides a mock function with given fields:
func (_m *MockRegistry) GetURL() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetURL")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockRegistry_GetURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetURL'
type MockRegistry_GetURL_Call struct {
	*mock.Call
}

// GetURL is a helper method to define mock.On call
func (_e *MockRegistry_Expecter) GetURL() *MockRegistry_GetURL_Call {
	return &MockRegistry_GetURL_Call{Call: _e.mock.On("GetURL")}
}

func (_c *MockRegistry_GetURL_Call) Run(run func()) *MockRegistry_GetURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRegistry_GetURL_Call) Return(_a0 string) *MockRegistry_GetURL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRegistry_GetURL_Call) RunAndReturn(run func() string) *MockRegistry_GetURL_Call {
	_c.Call.Return(run)
	return _c
}

// ImageExist provides a mock function with given fields: ref
func (_m *MockRegistry) ImageExist(ref string) (bool, error) {
	ret := _m.Called(ref)

	if len(ret) == 0 {
		panic("no return value specified for ImageExist")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(ref)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(ref)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ref)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRegistry_ImageExist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImageExist'
type MockRegistry_ImageExist_Call struct {
	*mock.Call
}

// ImageExist is a helper method to define mock.On call
//   - ref string
func (_e *MockRegistry_Expecter) ImageExist(ref interface{}) *MockRegistry_ImageExist_Call {
	return &MockRegistry_ImageExist_Call{Call: _e.mock.On("ImageExist", ref)}
}

func (_c *MockRegistry_ImageExist_Call) Run(run func(ref string)) *MockRegistry_ImageExist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRegistry_ImageExist_Call) Return(_a0 bool, _a1 error) *MockRegistry_ImageExist_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRegistry_ImageExist_Call) RunAndReturn(run func(string) (bool, error)) *MockRegistry_ImageExist_Call {
	_c.Call.Return(run)
	return _c
}

// Pull provides a mock function with given fields: ref
func (_m *MockRegistry) Pull(ref string) (v1.Image, error) {
	ret := _m.Called(ref)

	if len(ret) == 0 {
		panic("no return value specified for Pull")
	}

	var r0 v1.Image
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (v1.Image, error)); ok {
		return rf(ref)
	}
	if rf, ok := ret.Get(0).(func(string) v1.Image); ok {
		r0 = rf(ref)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.Image)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ref)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRegistry_Pull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pull'
type MockRegistry_Pull_Call struct {
	*mock.Call
}

// Pull is a helper method to define mock.On call
//   - ref string
func (_e *MockRegistry_Expecter) Pull(ref interface{}) *MockRegistry_Pull_Call {
	return &MockRegistry_Pull_Call{Call: _e.mock.On("Pull", ref)}
}

func (_c *MockRegistry_Pull_Call) Run(run func(ref string)) *MockRegistry_Pull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRegistry_Pull_Call) Return(_a0 v1.Image, _a1 error) *MockRegistry_Pull_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRegistry_Pull_Call) RunAndReturn(run func(string) (v1.Image, error)) *MockRegistry_Pull_Call {
	_c.Call.Return(run)
	return _c
}

// Push provides a mock function with given fields: ref, image
func (_m *MockRegistry) Push(ref string, image v1.Image) error {
	ret := _m.Called(ref, image)

	if len(ret) == 0 {
		panic("no return value specified for Push")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, v1.Image) error); ok {
		r0 = rf(ref, image)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRegistry_Push_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Push'
type MockRegistry_Push_Call struct {
	*mock.Call
}

// Push is a helper method to define mock.On call
//   - ref string
//   - image v1.Image
func (_e *MockRegistry_Expecter) Push(ref interface{}, image interface{}) *MockRegistry_Push_Call {
	return &MockRegistry_Push_Call{Call: _e.mock.On("Push", ref, image)}
}

func (_c *MockRegistry_Push_Call) Run(run func(ref string, image v1.Image)) *MockRegistry_Push_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(v1.Image))
	})
	return _c
}

func (_c *MockRegistry_Push_Call) Return(_a0 error) *MockRegistry_Push_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRegistry_Push_Call) RunAndReturn(run func(string, v1.Image) error) *MockRegistry_Push_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRegistry creates a new instance of MockRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRegistry(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRegistry {
	mock := &MockRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
