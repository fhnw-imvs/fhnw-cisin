// Code generated by mockery v2.46.2. DO NOT EDIT.

package repomocks

import (
	context "context"

	containerdaemonrepository "github.com/fhnw-imvs/fhnw-cisin/internal/repository/containerdaemon"

	mock "github.com/stretchr/testify/mock"
)

// MockContainerDaemon is an autogenerated mock type for the ContainerDaemon type
type MockContainerDaemon struct {
	mock.Mock
}

type MockContainerDaemon_Expecter struct {
	mock *mock.Mock
}

func (_m *MockContainerDaemon) EXPECT() *MockContainerDaemon_Expecter {
	return &MockContainerDaemon_Expecter{mock: &_m.Mock}
}

// GetDigest provides a mock function with given fields: ctx, ref
func (_m *MockContainerDaemon) GetDigest(ctx context.Context, ref string) (string, error) {
	ret := _m.Called(ctx, ref)

	if len(ret) == 0 {
		panic("no return value specified for GetDigest")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, ref)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, ref)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ref)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockContainerDaemon_GetDigest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDigest'
type MockContainerDaemon_GetDigest_Call struct {
	*mock.Call
}

// GetDigest is a helper method to define mock.On call
//   - ctx context.Context
//   - ref string
func (_e *MockContainerDaemon_Expecter) GetDigest(ctx interface{}, ref interface{}) *MockContainerDaemon_GetDigest_Call {
	return &MockContainerDaemon_GetDigest_Call{Call: _e.mock.On("GetDigest", ctx, ref)}
}

func (_c *MockContainerDaemon_GetDigest_Call) Run(run func(ctx context.Context, ref string)) *MockContainerDaemon_GetDigest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockContainerDaemon_GetDigest_Call) Return(_a0 string, _a1 error) *MockContainerDaemon_GetDigest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockContainerDaemon_GetDigest_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockContainerDaemon_GetDigest_Call {
	_c.Call.Return(run)
	return _c
}

// ListContainerImages provides a mock function with given fields: ctx
func (_m *MockContainerDaemon) ListContainerImages(ctx context.Context) ([]containerdaemonrepository.Image, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListContainerImages")
	}

	var r0 []containerdaemonrepository.Image
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]containerdaemonrepository.Image, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []containerdaemonrepository.Image); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]containerdaemonrepository.Image)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockContainerDaemon_ListContainerImages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListContainerImages'
type MockContainerDaemon_ListContainerImages_Call struct {
	*mock.Call
}

// ListContainerImages is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockContainerDaemon_Expecter) ListContainerImages(ctx interface{}) *MockContainerDaemon_ListContainerImages_Call {
	return &MockContainerDaemon_ListContainerImages_Call{Call: _e.mock.On("ListContainerImages", ctx)}
}

func (_c *MockContainerDaemon_ListContainerImages_Call) Run(run func(ctx context.Context)) *MockContainerDaemon_ListContainerImages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockContainerDaemon_ListContainerImages_Call) Return(_a0 []containerdaemonrepository.Image, _a1 error) *MockContainerDaemon_ListContainerImages_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockContainerDaemon_ListContainerImages_Call) RunAndReturn(run func(context.Context) ([]containerdaemonrepository.Image, error)) *MockContainerDaemon_ListContainerImages_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockContainerDaemon creates a new instance of MockContainerDaemon. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockContainerDaemon(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockContainerDaemon {
	mock := &MockContainerDaemon{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
