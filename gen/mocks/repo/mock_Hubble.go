// Code generated by mockery v2.46.2. DO NOT EDIT.

package repomocks

import (
	context "context"

	hubblerepostiory "github.com/fhnw-imvs/fhnw-cisin/internal/repository/hubble"
	mock "github.com/stretchr/testify/mock"
)

// MockHubble is an autogenerated mock type for the Hubble type
type MockHubble struct {
	mock.Mock
}

type MockHubble_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHubble) EXPECT() *MockHubble_Expecter {
	return &MockHubble_Expecter{mock: &_m.Mock}
}

// StartFlowChannel provides a mock function with given fields: ctx
func (_m *MockHubble) StartFlowChannel(ctx context.Context) (chan *hubblerepostiory.Flow, chan error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for StartFlowChannel")
	}

	var r0 chan *hubblerepostiory.Flow
	var r1 chan error
	if rf, ok := ret.Get(0).(func(context.Context) (chan *hubblerepostiory.Flow, chan error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) chan *hubblerepostiory.Flow); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *hubblerepostiory.Flow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) chan error); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(chan error)
		}
	}

	return r0, r1
}

// MockHubble_StartFlowChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartFlowChannel'
type MockHubble_StartFlowChannel_Call struct {
	*mock.Call
}

// StartFlowChannel is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockHubble_Expecter) StartFlowChannel(ctx interface{}) *MockHubble_StartFlowChannel_Call {
	return &MockHubble_StartFlowChannel_Call{Call: _e.mock.On("StartFlowChannel", ctx)}
}

func (_c *MockHubble_StartFlowChannel_Call) Run(run func(ctx context.Context)) *MockHubble_StartFlowChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockHubble_StartFlowChannel_Call) Return(_a0 chan *hubblerepostiory.Flow, _a1 chan error) *MockHubble_StartFlowChannel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHubble_StartFlowChannel_Call) RunAndReturn(run func(context.Context) (chan *hubblerepostiory.Flow, chan error)) *MockHubble_StartFlowChannel_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHubble creates a new instance of MockHubble. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHubble(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHubble {
	mock := &MockHubble{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
