// Code generated by mockery v2.46.2. DO NOT EDIT.

package repomocks

import mock "github.com/stretchr/testify/mock"

// MockIfaces is an autogenerated mock type for the Ifaces type
type MockIfaces struct {
	mock.Mock
}

type MockIfaces_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIfaces) EXPECT() *MockIfaces_Expecter {
	return &MockIfaces_Expecter{mock: &_m.Mock}
}

// GetIPAddresses provides a mock function with given fields:
func (_m *MockIfaces) GetIPAddresses() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetIPAddresses")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIfaces_GetIPAddresses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIPAddresses'
type MockIfaces_GetIPAddresses_Call struct {
	*mock.Call
}

// GetIPAddresses is a helper method to define mock.On call
func (_e *MockIfaces_Expecter) GetIPAddresses() *MockIfaces_GetIPAddresses_Call {
	return &MockIfaces_GetIPAddresses_Call{Call: _e.mock.On("GetIPAddresses")}
}

func (_c *MockIfaces_GetIPAddresses_Call) Run(run func()) *MockIfaces_GetIPAddresses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIfaces_GetIPAddresses_Call) Return(_a0 []string, _a1 error) *MockIfaces_GetIPAddresses_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIfaces_GetIPAddresses_Call) RunAndReturn(run func() ([]string, error)) *MockIfaces_GetIPAddresses_Call {
	_c.Call.Return(run)
	return _c
}

// LookupAddr provides a mock function with given fields: ip
func (_m *MockIfaces) LookupAddr(ip string) (string, error) {
	ret := _m.Called(ip)

	if len(ret) == 0 {
		panic("no return value specified for LookupAddr")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(ip)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(ip)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ip)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIfaces_LookupAddr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LookupAddr'
type MockIfaces_LookupAddr_Call struct {
	*mock.Call
}

// LookupAddr is a helper method to define mock.On call
//   - ip string
func (_e *MockIfaces_Expecter) LookupAddr(ip interface{}) *MockIfaces_LookupAddr_Call {
	return &MockIfaces_LookupAddr_Call{Call: _e.mock.On("LookupAddr", ip)}
}

func (_c *MockIfaces_LookupAddr_Call) Run(run func(ip string)) *MockIfaces_LookupAddr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockIfaces_LookupAddr_Call) Return(_a0 string, _a1 error) *MockIfaces_LookupAddr_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIfaces_LookupAddr_Call) RunAndReturn(run func(string) (string, error)) *MockIfaces_LookupAddr_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIfaces creates a new instance of MockIfaces. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIfaces(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIfaces {
	mock := &MockIfaces{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
