// Code generated by mockery v2.46.2. DO NOT EDIT.

package repomocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockSBOM is an autogenerated mock type for the SBOM type
type MockSBOM struct {
	mock.Mock
}

type MockSBOM_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSBOM) EXPECT() *MockSBOM_Expecter {
	return &MockSBOM_Expecter{mock: &_m.Mock}
}

// GetSBOM provides a mock function with given fields: location
func (_m *MockSBOM) GetSBOM(location string) ([]byte, error) {
	ret := _m.Called(location)

	if len(ret) == 0 {
		panic("no return value specified for GetSBOM")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(location)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(location)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(location)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSBOM_GetSBOM_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSBOM'
type MockSBOM_GetSBOM_Call struct {
	*mock.Call
}

// GetSBOM is a helper method to define mock.On call
//   - location string
func (_e *MockSBOM_Expecter) GetSBOM(location interface{}) *MockSBOM_GetSBOM_Call {
	return &MockSBOM_GetSBOM_Call{Call: _e.mock.On("GetSBOM", location)}
}

func (_c *MockSBOM_GetSBOM_Call) Run(run func(location string)) *MockSBOM_GetSBOM_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSBOM_GetSBOM_Call) Return(_a0 []byte, _a1 error) *MockSBOM_GetSBOM_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSBOM_GetSBOM_Call) RunAndReturn(run func(string) ([]byte, error)) *MockSBOM_GetSBOM_Call {
	_c.Call.Return(run)
	return _c
}

// GetSBOMURL provides a mock function with given fields: ctx, ref
func (_m *MockSBOM) GetSBOMURL(ctx context.Context, ref string) (string, error) {
	ret := _m.Called(ctx, ref)

	if len(ret) == 0 {
		panic("no return value specified for GetSBOMURL")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, ref)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, ref)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ref)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSBOM_GetSBOMURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSBOMURL'
type MockSBOM_GetSBOMURL_Call struct {
	*mock.Call
}

// GetSBOMURL is a helper method to define mock.On call
//   - ctx context.Context
//   - ref string
func (_e *MockSBOM_Expecter) GetSBOMURL(ctx interface{}, ref interface{}) *MockSBOM_GetSBOMURL_Call {
	return &MockSBOM_GetSBOMURL_Call{Call: _e.mock.On("GetSBOMURL", ctx, ref)}
}

func (_c *MockSBOM_GetSBOMURL_Call) Run(run func(ctx context.Context, ref string)) *MockSBOM_GetSBOMURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSBOM_GetSBOMURL_Call) Return(_a0 string, _a1 error) *MockSBOM_GetSBOMURL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSBOM_GetSBOMURL_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockSBOM_GetSBOMURL_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSBOM creates a new instance of MockSBOM. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSBOM(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSBOM {
	mock := &MockSBOM{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
