// Code generated by mockery v2.46.2. DO NOT EDIT.

package repomocks

import (
	context "context"

	appsv1 "k8s.io/api/apps/v1"

	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/api/core/v1"

	v2 "github.com/cilium/cilium/pkg/k8s/apis/cilium.io/v2"
)

// MockK8s is an autogenerated mock type for the K8s type
type MockK8s struct {
	mock.Mock
}

type MockK8s_Expecter struct {
	mock *mock.Mock
}

func (_m *MockK8s) EXPECT() *MockK8s_Expecter {
	return &MockK8s_Expecter{mock: &_m.Mock}
}

// GetExternalWorkload provides a mock function with given fields: ctx, name, namespace
func (_m *MockK8s) GetExternalWorkload(ctx context.Context, name string, namespace string) (*v2.CiliumExternalWorkload, error) {
	ret := _m.Called(ctx, name, namespace)

	if len(ret) == 0 {
		panic("no return value specified for GetExternalWorkload")
	}

	var r0 *v2.CiliumExternalWorkload
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*v2.CiliumExternalWorkload, error)); ok {
		return rf(ctx, name, namespace)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v2.CiliumExternalWorkload); ok {
		r0 = rf(ctx, name, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.CiliumExternalWorkload)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockK8s_GetExternalWorkload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExternalWorkload'
type MockK8s_GetExternalWorkload_Call struct {
	*mock.Call
}

// GetExternalWorkload is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - namespace string
func (_e *MockK8s_Expecter) GetExternalWorkload(ctx interface{}, name interface{}, namespace interface{}) *MockK8s_GetExternalWorkload_Call {
	return &MockK8s_GetExternalWorkload_Call{Call: _e.mock.On("GetExternalWorkload", ctx, name, namespace)}
}

func (_c *MockK8s_GetExternalWorkload_Call) Run(run func(ctx context.Context, name string, namespace string)) *MockK8s_GetExternalWorkload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockK8s_GetExternalWorkload_Call) Return(_a0 *v2.CiliumExternalWorkload, _a1 error) *MockK8s_GetExternalWorkload_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockK8s_GetExternalWorkload_Call) RunAndReturn(run func(context.Context, string, string) (*v2.CiliumExternalWorkload, error)) *MockK8s_GetExternalWorkload_Call {
	_c.Call.Return(run)
	return _c
}

// GetPod provides a mock function with given fields: ctx, name, namespace
func (_m *MockK8s) GetPod(ctx context.Context, name string, namespace string) (*v1.Pod, error) {
	ret := _m.Called(ctx, name, namespace)

	if len(ret) == 0 {
		panic("no return value specified for GetPod")
	}

	var r0 *v1.Pod
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*v1.Pod, error)); ok {
		return rf(ctx, name, namespace)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v1.Pod); ok {
		r0 = rf(ctx, name, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Pod)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockK8s_GetPod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPod'
type MockK8s_GetPod_Call struct {
	*mock.Call
}

// GetPod is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - namespace string
func (_e *MockK8s_Expecter) GetPod(ctx interface{}, name interface{}, namespace interface{}) *MockK8s_GetPod_Call {
	return &MockK8s_GetPod_Call{Call: _e.mock.On("GetPod", ctx, name, namespace)}
}

func (_c *MockK8s_GetPod_Call) Run(run func(ctx context.Context, name string, namespace string)) *MockK8s_GetPod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockK8s_GetPod_Call) Return(_a0 *v1.Pod, _a1 error) *MockK8s_GetPod_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockK8s_GetPod_Call) RunAndReturn(run func(context.Context, string, string) (*v1.Pod, error)) *MockK8s_GetPod_Call {
	_c.Call.Return(run)
	return _c
}

// GetReplicaSet provides a mock function with given fields: ctx, name, namespace
func (_m *MockK8s) GetReplicaSet(ctx context.Context, name string, namespace string) (*appsv1.ReplicaSet, error) {
	ret := _m.Called(ctx, name, namespace)

	if len(ret) == 0 {
		panic("no return value specified for GetReplicaSet")
	}

	var r0 *appsv1.ReplicaSet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*appsv1.ReplicaSet, error)); ok {
		return rf(ctx, name, namespace)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *appsv1.ReplicaSet); ok {
		r0 = rf(ctx, name, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsv1.ReplicaSet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockK8s_GetReplicaSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReplicaSet'
type MockK8s_GetReplicaSet_Call struct {
	*mock.Call
}

// GetReplicaSet is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - namespace string
func (_e *MockK8s_Expecter) GetReplicaSet(ctx interface{}, name interface{}, namespace interface{}) *MockK8s_GetReplicaSet_Call {
	return &MockK8s_GetReplicaSet_Call{Call: _e.mock.On("GetReplicaSet", ctx, name, namespace)}
}

func (_c *MockK8s_GetReplicaSet_Call) Run(run func(ctx context.Context, name string, namespace string)) *MockK8s_GetReplicaSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockK8s_GetReplicaSet_Call) Return(_a0 *appsv1.ReplicaSet, _a1 error) *MockK8s_GetReplicaSet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockK8s_GetReplicaSet_Call) RunAndReturn(run func(context.Context, string, string) (*appsv1.ReplicaSet, error)) *MockK8s_GetReplicaSet_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockK8s creates a new instance of MockK8s. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockK8s(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockK8s {
	mock := &MockK8s{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
