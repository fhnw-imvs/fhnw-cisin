// Code generated by mockery v2.46.2. DO NOT EDIT.

package repomocks

import mock "github.com/stretchr/testify/mock"

// MockAPI is an autogenerated mock type for the API type
type MockAPI struct {
	mock.Mock
}

type MockAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAPI) EXPECT() *MockAPI_Expecter {
	return &MockAPI_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: p
func (_m *MockAPI) Get(p string) ([]byte, error) {
	ret := _m.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(p)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockAPI_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - p string
func (_e *MockAPI_Expecter) Get(p interface{}) *MockAPI_Get_Call {
	return &MockAPI_Get_Call{Call: _e.mock.On("Get", p)}
}

func (_c *MockAPI_Get_Call) Run(run func(p string)) *MockAPI_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAPI_Get_Call) Return(_a0 []byte, _a1 error) *MockAPI_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPI_Get_Call) RunAndReturn(run func(string) ([]byte, error)) *MockAPI_Get_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAPI creates a new instance of MockAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAPI {
	mock := &MockAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
